// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cloud.signaling.proto

package signalingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerResp, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerResp, error) {
	out := new(GetAnswerResp)
	err := c.cc.Invoke(ctx, "/pb.peerService/GetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	GetAnswer(context.Context, *GetAnswerReq) (*GetAnswerResp, error)
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) GetAnswer(context.Context, *GetAnswerReq) (*GetAnswerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.peerService/GetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).GetAnswer(ctx, req.(*GetAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.peerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnswer",
			Handler:    _PeerService_GetAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud.signaling.proto",
}

// InternalAuthServiceClient is the client API for InternalAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalAuthServiceClient interface {
	AuthPeer(ctx context.Context, in *AuthPeerReq, opts ...grpc.CallOption) (*AuthPeerResp, error)
}

type internalAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAuthServiceClient(cc grpc.ClientConnInterface) InternalAuthServiceClient {
	return &internalAuthServiceClient{cc}
}

func (c *internalAuthServiceClient) AuthPeer(ctx context.Context, in *AuthPeerReq, opts ...grpc.CallOption) (*AuthPeerResp, error) {
	out := new(AuthPeerResp)
	err := c.cc.Invoke(ctx, "/pb.internalAuthService/AuthPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalAuthServiceServer is the server API for InternalAuthService service.
// All implementations must embed UnimplementedInternalAuthServiceServer
// for forward compatibility
type InternalAuthServiceServer interface {
	AuthPeer(context.Context, *AuthPeerReq) (*AuthPeerResp, error)
	mustEmbedUnimplementedInternalAuthServiceServer()
}

// UnimplementedInternalAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalAuthServiceServer struct {
}

func (UnimplementedInternalAuthServiceServer) AuthPeer(context.Context, *AuthPeerReq) (*AuthPeerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthPeer not implemented")
}
func (UnimplementedInternalAuthServiceServer) mustEmbedUnimplementedInternalAuthServiceServer() {}

// UnsafeInternalAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAuthServiceServer will
// result in compilation errors.
type UnsafeInternalAuthServiceServer interface {
	mustEmbedUnimplementedInternalAuthServiceServer()
}

func RegisterInternalAuthServiceServer(s grpc.ServiceRegistrar, srv InternalAuthServiceServer) {
	s.RegisterService(&InternalAuthService_ServiceDesc, srv)
}

func _InternalAuthService_AuthPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAuthServiceServer).AuthPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.internalAuthService/AuthPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAuthServiceServer).AuthPeer(ctx, req.(*AuthPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalAuthService_ServiceDesc is the grpc.ServiceDesc for InternalAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.internalAuthService",
	HandlerType: (*InternalAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthPeer",
			Handler:    _InternalAuthService_AuthPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud.signaling.proto",
}
