// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: types.signaling.proto

package signalingpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **************************************************** 通用 ***************************************************** //
// SDPType describes the type of an SessionDescription.
type SDPType int32

const (
	SDPType_SDPTypeUnkown SDPType = 0
	// SDPTypeOffer indicates that a description MUST be treated as an SDP
	// offer.
	SDPType_SDPTypeOffer SDPType = 1
	// SDPTypePranswer indicates that a description MUST be treated as an
	// SDP answer, but not a final answer. A description used as an SDP
	// pranswer may be applied as a response to an SDP offer, or an update to
	// a previously sent SDP pranswer.
	SDPType_SDPTypePranswer SDPType = 2
	// SDPTypeAnswer indicates that a description MUST be treated as an SDP
	// final answer, and the offer-answer exchange MUST be considered complete.
	// A description used as an SDP answer may be applied as a response to an
	// SDP offer or as an update to a previously sent SDP pranswer.
	SDPType_SDPTypeAnswer SDPType = 3
	// SDPTypeRollback indicates that a description MUST be treated as
	// canceling the current SDP negotiation and moving the SDP offer and
	// answer back to what it was in the previous stable state. Note the
	// local or remote SDP descriptions in the previous stable state could be
	// null if there has not yet been a successful offer-answer negotiation.
	SDPType_SDPTypeRollback SDPType = 4
)

// Enum value maps for SDPType.
var (
	SDPType_name = map[int32]string{
		0: "SDPTypeUnkown",
		1: "SDPTypeOffer",
		2: "SDPTypePranswer",
		3: "SDPTypeAnswer",
		4: "SDPTypeRollback",
	}
	SDPType_value = map[string]int32{
		"SDPTypeUnkown":   0,
		"SDPTypeOffer":    1,
		"SDPTypePranswer": 2,
		"SDPTypeAnswer":   3,
		"SDPTypeRollback": 4,
	}
)

func (x SDPType) Enum() *SDPType {
	p := new(SDPType)
	*p = x
	return p
}

func (x SDPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SDPType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_signaling_proto_enumTypes[0].Descriptor()
}

func (SDPType) Type() protoreflect.EnumType {
	return &file_types_signaling_proto_enumTypes[0]
}

func (x SDPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SDPType.Descriptor instead.
func (SDPType) EnumDescriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{0}
}

type MessageForPeerServer_Type int32

const (
	// 发送请求
	MessageForPeerServer_Request MessageForPeerServer_Type = 0
	// 发送响应
	MessageForPeerServer_Response MessageForPeerServer_Type = 1
)

// Enum value maps for MessageForPeerServer_Type.
var (
	MessageForPeerServer_Type_name = map[int32]string{
		0: "Request",
		1: "Response",
	}
	MessageForPeerServer_Type_value = map[string]int32{
		"Request":  0,
		"Response": 1,
	}
)

func (x MessageForPeerServer_Type) Enum() *MessageForPeerServer_Type {
	p := new(MessageForPeerServer_Type)
	*p = x
	return p
}

func (x MessageForPeerServer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageForPeerServer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_types_signaling_proto_enumTypes[1].Descriptor()
}

func (MessageForPeerServer_Type) Type() protoreflect.EnumType {
	return &file_types_signaling_proto_enumTypes[1]
}

func (x MessageForPeerServer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageForPeerServer_Type.Descriptor instead.
func (MessageForPeerServer_Type) EnumDescriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{0, 0}
}

type RequestForPeerServer_Type int32

const (
	// 获取回答
	RequestForPeerServer_GetAnswer RequestForPeerServer_Type = 0
)

// Enum value maps for RequestForPeerServer_Type.
var (
	RequestForPeerServer_Type_name = map[int32]string{
		0: "GetAnswer",
	}
	RequestForPeerServer_Type_value = map[string]int32{
		"GetAnswer": 0,
	}
)

func (x RequestForPeerServer_Type) Enum() *RequestForPeerServer_Type {
	p := new(RequestForPeerServer_Type)
	*p = x
	return p
}

func (x RequestForPeerServer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestForPeerServer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_types_signaling_proto_enumTypes[2].Descriptor()
}

func (RequestForPeerServer_Type) Type() protoreflect.EnumType {
	return &file_types_signaling_proto_enumTypes[2]
}

func (x RequestForPeerServer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestForPeerServer_Type.Descriptor instead.
func (RequestForPeerServer_Type) EnumDescriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{1, 0}
}

type ResponseForPeerServer_Type int32

const (
	// 获取回答
	ResponseForPeerServer_GetAnswer ResponseForPeerServer_Type = 0
)

// Enum value maps for ResponseForPeerServer_Type.
var (
	ResponseForPeerServer_Type_name = map[int32]string{
		0: "GetAnswer",
	}
	ResponseForPeerServer_Type_value = map[string]int32{
		"GetAnswer": 0,
	}
)

func (x ResponseForPeerServer_Type) Enum() *ResponseForPeerServer_Type {
	p := new(ResponseForPeerServer_Type)
	*p = x
	return p
}

func (x ResponseForPeerServer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseForPeerServer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_types_signaling_proto_enumTypes[3].Descriptor()
}

func (ResponseForPeerServer_Type) Type() protoreflect.EnumType {
	return &file_types_signaling_proto_enumTypes[3]
}

func (x ResponseForPeerServer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseForPeerServer_Type.Descriptor instead.
func (ResponseForPeerServer_Type) EnumDescriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{2, 0}
}

type MessageForPeerServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     MessageForPeerServer_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.MessageForPeerServer_Type" json:"type,omitempty"`
	Request  *RequestForPeerServer     `protobuf:"bytes,2,opt,name=request,proto3,oneof" json:"request,omitempty"`
	Response *ResponseForPeerServer    `protobuf:"bytes,3,opt,name=response,proto3,oneof" json:"response,omitempty"`
}

func (x *MessageForPeerServer) Reset() {
	*x = MessageForPeerServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_signaling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageForPeerServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageForPeerServer) ProtoMessage() {}

func (x *MessageForPeerServer) ProtoReflect() protoreflect.Message {
	mi := &file_types_signaling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageForPeerServer.ProtoReflect.Descriptor instead.
func (*MessageForPeerServer) Descriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{0}
}

func (x *MessageForPeerServer) GetType() MessageForPeerServer_Type {
	if x != nil {
		return x.Type
	}
	return MessageForPeerServer_Request
}

func (x *MessageForPeerServer) GetRequest() *RequestForPeerServer {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MessageForPeerServer) GetResponse() *ResponseForPeerServer {
	if x != nil {
		return x.Response
	}
	return nil
}

// RequestForPeerServer 请求
type RequestForPeerServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      RequestForPeerServer_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.RequestForPeerServer_Type" json:"type,omitempty"`
	RequestId string                    `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Payload   []byte                    `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RequestForPeerServer) Reset() {
	*x = RequestForPeerServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_signaling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestForPeerServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestForPeerServer) ProtoMessage() {}

func (x *RequestForPeerServer) ProtoReflect() protoreflect.Message {
	mi := &file_types_signaling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestForPeerServer.ProtoReflect.Descriptor instead.
func (*RequestForPeerServer) Descriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{1}
}

func (x *RequestForPeerServer) GetType() RequestForPeerServer_Type {
	if x != nil {
		return x.Type
	}
	return RequestForPeerServer_GetAnswer
}

func (x *RequestForPeerServer) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RequestForPeerServer) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// ResponseForPeerServer 响应
type ResponseForPeerServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ResponseForPeerServer_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.ResponseForPeerServer_Type" json:"type,omitempty"`
	RequestId string                     `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Payload   []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ResponseForPeerServer) Reset() {
	*x = ResponseForPeerServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_signaling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseForPeerServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseForPeerServer) ProtoMessage() {}

func (x *ResponseForPeerServer) ProtoReflect() protoreflect.Message {
	mi := &file_types_signaling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseForPeerServer.ProtoReflect.Descriptor instead.
func (*ResponseForPeerServer) Descriptor() ([]byte, []int) {
	return file_types_signaling_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseForPeerServer) GetType() ResponseForPeerServer_Type {
	if x != nil {
		return x.Type
	}
	return ResponseForPeerServer_GetAnswer
}

func (x *ResponseForPeerServer) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResponseForPeerServer) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_types_signaling_proto protoreflect.FileDescriptor

var file_types_signaling_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xfa, 0x01, 0x0a, 0x14,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x22, 0x21, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x15, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x10, 0x00, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x15, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x00,
	0x2a, 0x6b, 0x0a, 0x07, 0x53, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x44, 0x50, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x44, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x42, 0x0f, 0x5a,
	0x0d, 0x2e, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_signaling_proto_rawDescOnce sync.Once
	file_types_signaling_proto_rawDescData = file_types_signaling_proto_rawDesc
)

func file_types_signaling_proto_rawDescGZIP() []byte {
	file_types_signaling_proto_rawDescOnce.Do(func() {
		file_types_signaling_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_signaling_proto_rawDescData)
	})
	return file_types_signaling_proto_rawDescData
}

var file_types_signaling_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_types_signaling_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_types_signaling_proto_goTypes = []interface{}{
	(SDPType)(0),                    // 0: pb.SDPType
	(MessageForPeerServer_Type)(0),  // 1: pb.MessageForPeerServer.Type
	(RequestForPeerServer_Type)(0),  // 2: pb.RequestForPeerServer.Type
	(ResponseForPeerServer_Type)(0), // 3: pb.ResponseForPeerServer.Type
	(*MessageForPeerServer)(nil),    // 4: pb.MessageForPeerServer
	(*RequestForPeerServer)(nil),    // 5: pb.RequestForPeerServer
	(*ResponseForPeerServer)(nil),   // 6: pb.ResponseForPeerServer
}
var file_types_signaling_proto_depIdxs = []int32{
	1, // 0: pb.MessageForPeerServer.type:type_name -> pb.MessageForPeerServer.Type
	5, // 1: pb.MessageForPeerServer.request:type_name -> pb.RequestForPeerServer
	6, // 2: pb.MessageForPeerServer.response:type_name -> pb.ResponseForPeerServer
	2, // 3: pb.RequestForPeerServer.type:type_name -> pb.RequestForPeerServer.Type
	3, // 4: pb.ResponseForPeerServer.type:type_name -> pb.ResponseForPeerServer.Type
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_types_signaling_proto_init() }
func file_types_signaling_proto_init() {
	if File_types_signaling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_signaling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageForPeerServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_signaling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestForPeerServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_signaling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseForPeerServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_signaling_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_signaling_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_signaling_proto_goTypes,
		DependencyIndexes: file_types_signaling_proto_depIdxs,
		EnumInfos:         file_types_signaling_proto_enumTypes,
		MessageInfos:      file_types_signaling_proto_msgTypes,
	}.Build()
	File_types_signaling_proto = out.File
	file_types_signaling_proto_rawDesc = nil
	file_types_signaling_proto_goTypes = nil
	file_types_signaling_proto_depIdxs = nil
}
